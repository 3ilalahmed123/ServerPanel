@page "/tf2serverstatus"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@inject site.Services.Tf2ServerService Tf2ServerService
@inject ILogger<Pages.Tf2ServerStatus> Logger
@inject IJSRuntime JS

<h3>Counter-Strike: Source Server</h3>

<!-- Tabs -->
<ul class="nav nav-tabs mb-3">
    <li class="nav-item">
        <button class="nav-link @(activeTab == "status" ? "active" : "")"
                @onclick='() => SwitchTab("status")'>
            📊 Status
        </button>
    </li>
    <li class="nav-item">
        <button class="nav-link @(activeTab == "terminal" ? "active" : "")"
                @onclick='() => SwitchTab("terminal")'>
            💻 Terminal
        </button>
    </li>
</ul>

@if (activeTab == "status")
{
    @if (isLoading)
    {
        <p>Loading server info...</p>
    }
    else if (hasError)
    {
        <div class="alert alert-danger">
            ⚠️ Failed to retrieve server info. Check logs for details.
        </div>
    }
    else if (string.IsNullOrWhiteSpace(serverDetails))
    {
        <p>Server returned no details.</p>
    }
    else
    {
        <pre class="bg-dark text-light p-3" style="white-space: pre-wrap;">@serverDetails</pre>
    }
}
else if (activeTab == "terminal")
{
    <div class="mb-3">
        <input class="form-control" placeholder="Enter command (e.g., restart, stop, start, details)"
               @bind="command" @bind:event="oninput" />
        <button class="btn btn-primary mt-2" @onclick="RunCommand">Run</button>
    </div>

    @if (!string.IsNullOrEmpty(commandOutput))
    {
        <pre class="bg-dark text-light p-3" style="white-space: pre-wrap;">@commandOutput</pre>
    }
}

@code {
    private string activeTab = "status";
    private string? serverDetails;
    private bool isLoading = true;
    private bool hasError = false;

    private string command = "details";
    private string? commandOutput;

    private CancellationTokenSource? refreshCts;

    protected override void OnInitialized()
    {
        // UI renders immediately, data fetch starts after first render
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchServerStatusAsync();

            // Start auto-refresh loop
            refreshCts = new CancellationTokenSource();
            _ = AutoRefreshLoop(refreshCts.Token);
        }
    }

    private async Task FetchServerStatusAsync()
    {
        isLoading = true;
        hasError = false;
        StateHasChanged();

        try
        {
            Logger.LogInformation("🔄 [ServerStatus] Fetching Tf2 server details...");
            serverDetails = await Tf2ServerService.GetServerDetailsAsync();
            Logger.LogInformation("✅ Tf2 server details retrieved.");
        }
        catch (Exception ex)
        {
            hasError = true;
            Logger.LogError(ex, "❌ Failed to fetch Tf2 server details");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AutoRefreshLoop(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            if (activeTab == "status")
                await InvokeAsync(FetchServerStatusAsync);

            await Task.Delay(TimeSpan.FromSeconds(30), token);
        }
    }

    private void SwitchTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private async Task RunCommand()
    {
        Logger.LogInformation($"💻 Running Tf2 server command: {command}");
        commandOutput = "Fetching...";
        StateHasChanged();
        commandOutput = await Tf2ServerService.RunCommandAsync(command);
        StateHasChanged();
    }

    public void Dispose()
    {
        refreshCts?.Cancel();
        refreshCts?.Dispose();
    }
}
