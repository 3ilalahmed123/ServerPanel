@page "/serverstatus"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@inject site.Services.CssServerService CssServerService
@inject ILogger<Pages.ServerStatus> Logger
@inject IJSRuntime JS

<h3>Counter-Strike: Source Server Status</h3>

@if (isLoading)
{
    <p>Loading server info...</p>
}
else if (hasError)
{
    <div class="alert alert-danger">
        ⚠️ Failed to retrieve server info. Check logs for details.
    </div>
}
else if (string.IsNullOrWhiteSpace(serverDetails))
{
    <p>Server returned no details.</p>
}
else
{
    <pre>@serverDetails</pre> <!-- Show LinuxGSM output nicely -->
}

@code {
    private string? serverDetails;
    private bool isLoading = true;
    private bool hasError = false;
    private bool firstRender = true;

    protected override async Task OnInitializedAsync()
    {
        await RefreshServerStatus();
    }

    private async Task RefreshServerStatus()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            Logger.LogInformation("🔄 [ServerStatus] Fetching CSS server details...");
            serverDetails = await CssServerService.GetServerDetailsAsync();

            if (!string.IsNullOrWhiteSpace(serverDetails))
            {
                Logger.LogInformation("✅ CSS server details retrieved.");
            }
            else
            {
                Logger.LogWarning("⚠️ CSS server returned no output.");
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            Logger.LogError(ex, "❌ Failed to fetch CSS server details");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRenderCall)
    {
        if (firstRenderCall)
        {
            firstRender = false;

            if (hasError)
                await JS.InvokeVoidAsync("console.error", "❌ Failed to fetch CSS server details (see logs)");
            else if (string.IsNullOrWhiteSpace(serverDetails))
                await JS.InvokeVoidAsync("console.warn", "⚠️ CSS server returned no output");
            else
                await JS.InvokeVoidAsync("console.log", "✅ CSS server details retrieved successfully");

            // Auto-refresh every 30 seconds
            _ = Task.Run(async () =>
            {
                while (true)
                {
                    await Task.Delay(TimeSpan.FromSeconds(30));
                    await InvokeAsync(RefreshServerStatus);
                }
            });
        }
    }
}
