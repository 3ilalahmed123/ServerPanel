@page "/serverstatus"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@inject site.Services.CssServerService CssServerService
@inject ILogger<Pages.ServerStatus> Logger
@inject IJSRuntime JS

<h3>Counter-Strike: Source Server</h3>

<!-- Tabs -->
<ul class="nav nav-tabs mb-3">
    <li class="nav-item">
        <button class="nav-link @(activeTab == "status" ? "active" : "")"
                @onclick='() => SwitchTab("status")'>
            📊 Status
        </button>
    </li>
    <li class="nav-item">
        <button class="nav-link @(activeTab == "terminal" ? "active" : "")"
                @onclick='() => SwitchTab("terminal")'>
            💻 Terminal
        </button>
    </li>
</ul>


@if (activeTab == "status")
{
    @if (isLoading)
    {
        <p>Loading server info...</p>
    }
    else if (hasError)
    {
        <div class="alert alert-danger">
            ⚠️ Failed to retrieve server info. Check logs for details.
        </div>
    }
    else if (string.IsNullOrWhiteSpace(serverDetails))
    {
        <p>Server returned no details.</p>
    }
    else
    {
        <pre class="bg-dark text-light p-3" style="white-space: pre-wrap;">@serverDetails</pre>
    }
}
else if (activeTab == "terminal")
{
    <div class="mb-3">
        <input class="form-control" placeholder="Enter command (e.g., restart, stop, start, details)"
               @bind="command" @bind:event="oninput" />
        <button class="btn btn-primary mt-2" @onclick="RunCommand">Run</button>
    </div>

    @if (!string.IsNullOrEmpty(commandOutput))
    {
        <pre class="bg-dark text-light p-3" style="white-space: pre-wrap;">@commandOutput</pre>
    }
}

@code {
    // State
    private string activeTab = "status";

    private string? serverDetails;
    private bool isLoading = true;
    private bool hasError = false;
    private bool firstRender = true;

    // Terminal state
    private string command = "details";
    private string? commandOutput;

    protected override async Task OnInitializedAsync()
    {
        await RefreshServerStatus();
    }

    private async Task RefreshServerStatus()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            Logger.LogInformation("🔄 [ServerStatus] Fetching CSS server details...");
            serverDetails = await CssServerService.GetServerDetailsAsync();

            if (!string.IsNullOrWhiteSpace(serverDetails))
                Logger.LogInformation("✅ CSS server details retrieved.");
            else
                Logger.LogWarning("⚠️ CSS server returned no output.");
        }
        catch (Exception ex)
        {
            hasError = true;
            Logger.LogError(ex, "❌ Failed to fetch CSS server details");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SwitchTab(string tab)
    {
        activeTab = tab;
    }

    private async Task RunCommand()
    {
        Logger.LogInformation($"💻 Running CSS server command: {command}");
        commandOutput = "Fetching..."; // Clear terminal before running command
        StateHasChanged();    // Force UI update to show blank terminal
        commandOutput = await CssServerService.RunCommandAsync(command);
    }


    protected override async Task OnAfterRenderAsync(bool firstRenderCall)
    {
        if (firstRenderCall)
        {
            firstRender = false;

            if (hasError)
                await JS.InvokeVoidAsync("console.error", "❌ Failed to fetch CSS server details (see logs)");
            else if (string.IsNullOrWhiteSpace(serverDetails))
                await JS.InvokeVoidAsync("console.warn", "⚠️ CSS server returned no output");
            else
                await JS.InvokeVoidAsync("console.log", "✅ CSS server details retrieved successfully");

            // Auto-refresh every 30 seconds (only if on Status tab)
            _ = Task.Run(async () =>
            {
                while (true)
                {
                    if (activeTab == "status")
                        await InvokeAsync(RefreshServerStatus);

                    await Task.Delay(TimeSpan.FromSeconds(30));
                }
            });
        }
    }
}
