@page "/serverstatus"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop

@attribute [Authorize(Roles = "Admin")]

@inject site.Services.GameServerService GameServerService
@inject IJSRuntime JS

<h3>Game Server Status</h3>

@if (isLoading)
{
    <p>Loading server info...</p>
}
else if (hasError)
{
    <div class="alert alert-danger">
        ⚠️ Failed to retrieve server info. Check logs for details.
    </div>
}
else if (serverInfo == null)
{
    <p>Server is offline or unreachable.</p>
}
else
{
    <p><b>Name:</b> @serverInfo.Name</p>
    <p><b>Map:</b> @serverInfo.Map</p>
    <p><b>Players:</b> @serverInfo.Players / @serverInfo.MaxPlayers</p>
    <p><b>Ping:</b> @serverInfo.Ping ms</p>

    @if (players.Length > 0)
    {
        <h4>Players:</h4>
        <ul>
            @foreach (var p in players)
            {
                <li>@p.Name - @p.Score points - @p.Time.ToString("mm':'ss")</li>
            }
        </ul>
    }
    else
    {
        <p>No players currently connected.</p>
    }
}

@code {
    private QueryMaster.GameServer.ServerInfo? serverInfo;
    private QueryMaster.GameServer.PlayerInfo[] players = Array.Empty<QueryMaster.GameServer.PlayerInfo>();

    private bool isLoading = true;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("🔄 [ServerStatus] Fetching server info...");
            await JS.InvokeVoidAsync("console.log", "🔄 [ServerStatus] Fetching server info...");

            serverInfo = await GameServerService.GetInfoAsync();
            players = await GameServerService.GetPlayersAsync();

            if (serverInfo != null)
            {
                Console.WriteLine($"✅ [ServerStatus] Server online: {serverInfo.Name}, {serverInfo.Players}/{serverInfo.MaxPlayers} players");
                await JS.InvokeVoidAsync("console.log", $"✅ Server online: {serverInfo.Name}");
            }
            else
            {
                Console.WriteLine("⚠️ [ServerStatus] Server returned null (offline?)");
                await JS.InvokeVoidAsync("console.warn", "⚠️ Server returned null (offline?)");
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.WriteLine($"❌ [ServerStatus] Error: {ex.Message}");
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("console.error", $"❌ Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
